name: tests

on:
  push:
    branches:
      - master
  pull_request:
    branches:
    - '*'
  workflow_dispatch:
  schedule:
    - cron: '0 9 * * SUN'

jobs:
  test_suite:
    name: Pytest on ${{ matrix.python-version }}, ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: ['ubuntu-latest', 'macos-latest', 'windows-latest']
        python-version: ['3.6', '3.7', '3.8', '3.9', '3.10']
    timeout-minutes: 60
    defaults:
      run:
        shell: bash -l {0} 
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      ENV_NAME: "colorcet"
      MPLBACKEND: "Agg"
      DISPLAY: ":99.0"
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: "100"
      - uses: conda-incubator/setup-miniconda@v2
        with:
          miniconda-version: "latest"
      - name: Fetch
        run: git fetch --prune --tags -f
      - name: conda setup
        run: |
          conda update -n base -c defaults conda
          conda --version
          conda create -n ${{ env.ENV_NAME }}
          conda activate ${{ env.ENV_NAME }}
          conda config --env --append channels pyviz --append channels conda-forge --append channels nodefaults
          conda config --env --show-sources
          conda install python=${{ matrix.python-version }} pyctdev
      - name: doit develop_install
        run: |
          conda activate ${{ env.ENV_NAME }}
          doit develop_install -o tests -o examples
      - name: doit env_capture
        run: |
          conda activate ${{ env.ENV_NAME }}
          doit env_capture
      - name: doit test_lint
        run: |
          conda activate ${{ env.ENV_NAME }}
          doit test_lint
      - name: doit test_unit
        run: |
          conda activate ${{ env.ENV_NAME }}
          doit test_unit
      - name: doit test_examples
        run: |
          conda activate ${{ env.ENV_NAME }}
          doit test_examples
      - name: doit test_unit_extra
        run: |
          conda activate ${{ env.ENV_NAME }}
          pip install pytest-mpl
          doit test_unit_extra
      - uses: codecov/codecov-action@v3
        if: github.event_name == 'push'

  test_suite_py27:
    name: Pytest on Python 2.7 only
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: ['ubuntu-latest']
        python-version: [2.7]
    timeout-minutes: 60
    defaults:
      run:
        shell: bash -l {0} 
    env:
      HV_REQUIREMENTS: "tests"
      CHANS: "-c pyviz -c bokeh"
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      ENV_NAME: "colorcet"
      MPLBACKEND: "Agg"
      DISPLAY: ":99.0"
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: "100"
      - uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - uses: conda-incubator/setup-miniconda@v2
        with:
          miniconda-version: "latest"
          python-version: ${{ matrix.python-version }}
      - name: conda setup
        run: |
          conda config --set always_yes True
          conda --version
          conda install -c pyviz "pyctdev>=0.5"
          doit ecosystem_setup
          doit env_create --name=${{ env.ENV_NAME }} --python=${{ matrix.python-version }}
      - name: doit develop_install
        run: |
          eval "$(conda shell.bash hook)"
          conda activate ${{ env.ENV_NAME }}
          doit develop_install ${{ env.CHANS}} -o ${{ env.HV_REQUIREMENTS }}
      - name: doit env_capture
        run: |
          eval "$(conda shell.bash hook)"
          conda activate ${{ env.ENV_NAME }}
          doit env_capture
      - name: Handling backports on 'ubuntu-latest' and the decorator package
        if: matrix.os == 'ubuntu-latest'
        run: |
          eval "$(conda shell.bash hook)"
          conda activate ${{ env.ENV_NAME }}
          conda install ${{ env.CHANS}} backports.functools_lru_cache 'decorator=4.4.2'
      - name: doit env_capture again
        run: |
          eval "$(conda shell.bash hook)"
          conda activate ${{ env.ENV_NAME }}
          doit env_capture
      - name: doit test_unit
        if: matrix.os == 'ubuntu-latest'
        run: |
          eval "$(conda shell.bash hook)"
          conda activate ${{ env.ENV_NAME }}
          doit test_unit
      - name: doit test_unit
        if: matrix.os == 'macos-latest'
        run: |
          eval "$(conda shell.bash hook)"
          conda activate ${{ env.ENV_NAME }}
          pytest colorcet
